{"version":3,"sources":["NewItemView.js","AppHeader.js","ListView.js","ListItem.js","NoData.js","App.js","serviceWorker.js","index.js"],"names":["NewItemView","props","handleFormSubmit","event","data","studentID","state","studentName","studentEmail","id","cuid","handleNewStudSave","handleInputChange","bind","target","value","name","this","setState","className","type","onChange","placeholder","to","onClick","React","Component","AppHeader","ListView","student","getStudentDetails","handleDeleteStudent","ListItem","handleUpdateStudent","NoData","App","StudentsFromLocalStorage","studentDetails","KEY","getLocalStorageStudentData","localStorage","getItem","localData","JSON","parse","setItem","stringify","saveNewProfile","NewStudentData","newData","console","log","targetedStudent","forEach","item","deleteStudent","students","filter","updateStudentDetails","studID","StudentListJSX","length","map","s","key","basename","exact","path","component","transitionName","transitionAppear","transitionAppearTimeout","transitionEnterTimeout","transitionLeaveTimeout","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f438593.chunk.js","sourcesContent":["import React from 'react'\nimport './NewItemView.css'\nimport { Link } from 'react-router-dom'\nimport cuid from 'cuid'\n\nclass NewItemView extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            studentName : \"\",\n            studentEmail : '',\n            studentID : ''\n        }\n    \n        this.handleInputChange = this.handleInputChange.bind(this);\n      }\n\n    handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n        [name]: value\n    });\n    }\n    \n\n    handleFormSubmit = (event) => {\n        let data = {\n            studentID : this.state.studentID,\n            studentName : this.state.studentName,\n            studentEmail : this.state.studentEmail,\n            id : cuid()\n        }\n        this.props.handleNewStudSave(data)\n    }\n\n    render() {\n        return (    \n            <form id=\"Add-student-form\" className=\"Add-New-Form\">\n                <div>\n                    <label>Student Name</label>\n                    <input type=\"text\" name=\"studentName\" value={this.state.studentName} onChange={this.handleInputChange} placeholder=\"Enter student name..\" />\n                </div>\n                <div>\n                    <label>Student Email</label>\n                    <input type=\"text\" name=\"studentEmail\" value={this.state.studentEmail} onChange={this.handleInputChange} placeholder=\"Enter student email..\" />\n                </div>\n                <div>\n                    <label>Student ID</label>\n                    <input type=\"text\" name=\"studentID\" value={this.state.studentID} onChange={this.handleInputChange} placeholder=\"Enter student id..\" />\n                </div>\n                <div>\n                    <Link to=\"/\" className=\"btn\" onClick={this.handleFormSubmit} type=\"submit\">Add Student</Link>\n                    <Link to=\"/\" className=\"btn\">Cancel</Link>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default NewItemView","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './AppHeader.css'\n\nfunction AppHeader(){\n    return (\n        <header className=\"App-header\">\n            <h3><Link to=\"/\" className=\"nav-item\">Home</Link></h3>\n            <h1>\n            React CRUD List\n            </h1>\n            <h3><Link to=\"/AddNew\" className=\"List-Add-New nav-item\">Add New Item</Link></h3>\n        </header>\n    )\n}\n\nexport default AppHeader","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './ListView.css'\n\n\nfunction ListView(props){\n\n    return(\n        \n        <div className=\"StudentCard\"> \n            <div className=\"card-body\">\n                <div className=\"left-align\">\n                    <h2 className=\"Profile-name\"> {props.student.studentName} <br/>\n                        <span className=\"profile-id\">{props.student.studentID} </span> <br/>\n                        <span className=\"profile-email\"> {props.student.studentEmail} </span>\n                    </h2>\n                </div>\n                <div className=\"right-align\">\n                    <Link className=\"btn btn-edit\" to=\"/Edit\" onClick={() => props.getStudentDetails(props.student)} >Edit</Link>\n                    <button type=\"button\"  className=\"btn btn-delete\" onClick={() => props.handleDeleteStudent(props.student)}>Delete</button>\n                </div>\n            </div>\n        </div>\n\n    )\n\n}\n\nexport default ListView","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nclass ListItem extends React.Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            studentName : props.student.studentName,\n            studentEmail : props.student.studentEmail,\n            studentID : props.student.studentID\n        }\n    \n        this.handleInputChange = this.handleInputChange.bind(this);\n      }\n    \n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.value;\n        const name = target.name;\n        \n        this.setState({\n            [name]: value\n        });\n    }\n    \n    handleFormSubmit = (event) => {\n        let data = {\n            studentID : this.state.studentID,\n            studentName : this.state.studentName,\n            studentEmail : this.state.studentEmail,\n            id: this.props.student.id\n        }\n        this.props.handleUpdateStudent(data)\n    }\n\n    render() {\n        return (\n            <form id=\"Add-student-form\" className=\"Add-New-Form\">\n                <div>\n                    <label>Student Name</label>\n                    <input type=\"text\" name=\"studentName\" value={this.state.studentName} onChange={this.handleInputChange} placeholder=\"Enter student name..\" />\n                </div>\n                <div>\n                    <label>Student Email</label>\n                    <input type=\"text\" name=\"studentEmail\" value={this.state.studentEmail} onChange={this.handleInputChange} placeholder=\"Enter student email..\" />\n                </div>\n                <div>\n                    <label>Student ID</label>\n                    <input type=\"text\" name=\"studentID\" value={this.state.studentID} onChange={this.handleInputChange} placeholder=\"Enter student id..\" />\n                </div>\n                <div>\n                    <Link to=\"/\" className=\"btn\" onClick={this.handleFormSubmit} type=\"submit\">Update Student</Link>\n                    <Link to=\"/\" className=\"btn\">Cancel</Link>\n                </div>\n            </form>\n        )\n    }\n}\n\nexport default ListItem","import React from 'react'\nimport './AppHeader.css'\n\nfunction NoData() {\n    return (\n        <div className=\"empty-card\">\n            There is no data\n        </div>\n    )\n}\n\nexport default NoData","import React from 'react';\nimport NewItemView from './NewItemView'\nimport AppHeader from './AppHeader'\nimport ListView from './ListView'\nimport ListItem from './ListItem'\nimport NoData from './NoData'\nimport { HashRouter as Router ,Route, Switch } from 'react-router-dom'\nimport { CSSTransitionGroup } from 'react-transition-group';\nimport './App.css'\n\nclass App extends React.Component {\n  \n  state = {\n    StudentsFromLocalStorage : [],\n    studentDetails : [],\n    KEY : 'STUDENT_DATA'\n  }\n\n  getLocalStorageStudentData = () => {\n    //console.log(\"Geting data from local storage...\")\n    if(localStorage.getItem(this.state.KEY)){\n      let localData  = JSON.parse( localStorage.getItem(this.state.KEY) );\n      this.setState({ StudentsFromLocalStorage : localData })\n    }\n    else{\n      localStorage.setItem(this.state.KEY,JSON.stringify(this.state.StudentsFromLocalStorage));\n    }\n  }\n\n  componentDidMount() {\n    this.getLocalStorageStudentData()\n  }\n\n  saveNewProfile = (NewStudentData) => {\n    let newData = [NewStudentData, ...this.state.StudentsFromLocalStorage];\n    localStorage.setItem(this.state.KEY,JSON.stringify(newData));\n    this.setState({ StudentsFromLocalStorage : newData })\n    console.log(\"Saved...\")\n  }\n\n  getStudentDetails = (targetedStudent) => {\n    //console.log(\"Geting student details...\")\n    this.state.StudentsFromLocalStorage.forEach(item =>{\n      if(targetedStudent.id === item.id){\n        this.setState({ studentDetails : item })\n      }\n    })\n  }\n\n  deleteStudent = (targetedStudent) => {\n    const students = this.state.StudentsFromLocalStorage.filter(\n      student => student.id !== targetedStudent.id\n    )\n    localStorage.setItem(this.state.KEY,JSON.stringify(students));\n    this.setState({ StudentsFromLocalStorage : students })\n    console.log(\"Deleted..\")\n  }\n\n  updateStudentDetails = (targetedStudent) => {\n    console.log(\"updating student detail...\")\n    let studID = targetedStudent.id\n    let data = {\n        studentID : targetedStudent.studentID,\n        studentName : targetedStudent.studentName,\n        studentEmail : targetedStudent.studentEmail,\n        id : studID\n    }\n    const students = this.state.StudentsFromLocalStorage.filter(\n      student => student.id !== targetedStudent.id\n    )\n    let newData = [data, ...students];\n    localStorage.setItem(this.state.KEY,JSON.stringify(newData));\n    this.setState({ StudentsFromLocalStorage : newData })\n  }\n  \n  render(){\n    let StudentListJSX = \"\"\n    if(this.state.StudentsFromLocalStorage.length === 0){\n      StudentListJSX = <NoData />\n    }else{\n      StudentListJSX = this.state.StudentsFromLocalStorage.map(s => \n        (\n          <ListView student={s} key={s.id} getStudentDetails={this.getStudentDetails} handleDeleteStudent={this.deleteStudent} />\n        ))\n    }\n    \n   \n    return (\n      <Router basename=\"/\">\n        <div className=\"App\">\n          <AppHeader />\n          <Switch>\n            <Route exact path=\"/AddNew\">\n              <NewItemView handleNewStudSave={this.saveNewProfile}/>\n            </Route>\n            <Route exact path=\"/\">\n              <CSSTransitionGroup component=\"div\"\n                transitionName=\"fade\"\n                transitionAppear={true}\n                transitionAppearTimeout={200}\n                transitionEnterTimeout={250}\n                transitionLeaveTimeout={250}>\n                {StudentListJSX}\n              </CSSTransitionGroup>\n            </Route>\n            <Route exact path=\"/Edit\">\n              <CSSTransitionGroup component=\"div\"\n                transitionName=\"fade\"\n                transitionAppear={true}\n                transitionAppearTimeout={200}\n                transitionEnterTimeout={250}\n                transitionLeaveTimeout={250}>\n                <ListItem student={this.state.studentDetails} key={this.state.studentDetails.id} handleUpdateStudent={this.updateStudentDetails} />\n              </CSSTransitionGroup>\n            </Route>\n\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}